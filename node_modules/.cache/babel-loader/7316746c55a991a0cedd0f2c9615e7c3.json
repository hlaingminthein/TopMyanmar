{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar OUTPUT_STRING = exports.OUTPUT_STRING = 'OUTPUT_STRING';\nvar OUTPUT_TYPED_ARRAY = exports.OUTPUT_TYPED_ARRAY = 'OUTPUT_TYPED_ARRAY';\n\nvar arr2str = function arr2str(arr) {\n  return String.fromCharCode.apply(null, arr);\n};\n\nexports.default = function (base64Str) {\n  var outputEncoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : OUTPUT_STRING;\n  return outputEncoding === OUTPUT_STRING ? arr2str(decode(base64Str)) : decode(base64Str);\n};\n\nfunction decode(base64Str) {\n  var iOut = 0;\n  var arr = new Uint8Array(Math.ceil(base64Str.length * 3 / 4));\n\n  for (var i = 0, len = base64Str.length, validBits = 0, bitsSoFar = 0; i < len; i++) {\n    var bits = void 0;\n    var c = base64Str.charCodeAt(i);\n\n    if (c >= 0x41 && c <= 0x5a) {\n      // [A-Z]\n      bits = c - 0x41;\n    } else if (c >= 0x61 && c <= 0x7a) {\n      // [a-z]\n      bits = c - 0x61 + 0x1a;\n    } else if (c >= 0x30 && c <= 0x39) {\n      // [0-9]\n      bits = c - 0x30 + 0x34;\n    } else if (c === 0x2b) {\n      // +\n      bits = 0x3e;\n    } else if (c === 0x2f) {\n      // /\n      bits = 0x3f;\n    } else if (c === 0x3d) {\n      // =\n      validBits = 0;\n      continue;\n    } else {\n      // ignore all other characters!\n      continue;\n    }\n\n    bitsSoFar = bitsSoFar << 6 | bits;\n    validBits += 6;\n\n    if (validBits >= 8) {\n      validBits -= 8;\n      arr[iOut++] = bitsSoFar >> validBits;\n\n      if (validBits === 2) {\n        bitsSoFar &= 0x03;\n      } else if (validBits === 4) {\n        bitsSoFar &= 0x0f;\n      }\n    }\n  }\n\n  return iOut < arr.length ? arr.subarray(0, iOut) : arr;\n}","map":null,"metadata":{},"sourceType":"script"}