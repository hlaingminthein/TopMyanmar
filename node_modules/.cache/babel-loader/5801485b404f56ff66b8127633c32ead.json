{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar LOOKUP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\nvar MAX_CHUNK_LENGTH = 16383; // must be multiple of 3\n\nvar tripletToBase64 = function tripletToBase64(num) {\n  return LOOKUP[num >> 18 & 0x3F] + LOOKUP[num >> 12 & 0x3F] + LOOKUP[num >> 6 & 0x3F] + LOOKUP[num & 0x3F];\n};\n\nfunction encodeChunk(uint8, start, end) {\n  var output = '';\n\n  for (var i = start; i < end; i += 3) {\n    output += tripletToBase64((uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2]);\n  }\n\n  return output;\n}\n\nvar str2arr = function str2arr(str) {\n  return new Uint8Array(str.split('').map(function (char) {\n    return char.charCodeAt(0);\n  }));\n};\n\nfunction encode(data) {\n  var len = data.length;\n  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n\n  var output = ''; // go through the array every three bytes, we'll deal with trailing stuff later\n\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += MAX_CHUNK_LENGTH) {\n    output += encodeChunk(data, i, i + MAX_CHUNK_LENGTH > len2 ? len2 : i + MAX_CHUNK_LENGTH);\n  } // pad the end with zeros, but make sure to not forget the extra bytes\n\n\n  if (extraBytes === 1) {\n    var tmp = data[len - 1];\n    output += LOOKUP[tmp >> 2];\n    output += LOOKUP[tmp << 4 & 0x3F];\n    output += '==';\n  } else if (extraBytes === 2) {\n    var _tmp = (data[len - 2] << 8) + data[len - 1];\n\n    output += LOOKUP[_tmp >> 10];\n    output += LOOKUP[_tmp >> 4 & 0x3F];\n    output += LOOKUP[_tmp << 2 & 0x3F];\n    output += '=';\n  }\n\n  return output;\n}\n\nexports.default = function (data) {\n  return typeof data === 'string' ? encode(str2arr(data)) : encode(data);\n};","map":null,"metadata":{},"sourceType":"script"}