{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convert = exports.arr2str = exports.encode = undefined;\nexports.decode = decode;\n\nvar _textEncoding = require('text-encoding');\n/**\n * Encodes an unicode string into an Uint8Array object as UTF-8\n *\n * @param {String} str String to be encoded\n * @return {Uint8Array} UTF-8 encoded typed array\n */\n\n\nvar encode = exports.encode = function encode(str) {\n  return new _textEncoding.TextEncoder('UTF-8').encode(str);\n};\n\nvar arr2str = exports.arr2str = function arr2str(arr) {\n  var CHUNK_SZ = 0x8000;\n  var strs = [];\n\n  for (var i = 0; i < arr.length; i += CHUNK_SZ) {\n    strs.push(String.fromCharCode.apply(null, arr.subarray(i, i + CHUNK_SZ)));\n  }\n\n  return strs.join('');\n};\n/**\n * Decodes a string from Uint8Array to an unicode string using specified encoding\n *\n * @param {Uint8Array} buf Binary data to be decoded\n * @param {String} Binary data is decoded into string using this charset\n * @return {String} Decoded string\n */\n\n\nfunction decode(buf) {\n  var fromCharset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf-8';\n  var charsets = [{\n    charset: normalizeCharset(fromCharset),\n    fatal: false\n  }, {\n    charset: 'utf-8',\n    fatal: true\n  }, {\n    charset: 'iso-8859-15',\n    fatal: false\n  }];\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = charsets[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var _step$value = _step.value,\n          charset = _step$value.charset,\n          fatal = _step$value.fatal;\n\n      try {\n        return new _textEncoding.TextDecoder(charset, {\n          fatal: fatal\n        }).decode(buf);\n      } catch (e) {}\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return arr2str(buf); // all else fails, treat it as binary\n}\n/**\n * Convert a string from specific encoding to UTF-8 Uint8Array\n *\n * @param {String|Uint8Array} data Data to be encoded\n * @param {String} Source encoding for the string (optional for data of type String)\n * @return {Uint8Array} UTF-8 encoded typed array\n */\n\n\nvar convert = exports.convert = function convert(data, fromCharset) {\n  return typeof data === 'string' ? encode(data) : encode(decode(data, fromCharset));\n};\n\nfunction normalizeCharset() {\n  var charset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'utf-8';\n  var match = void 0;\n\n  if (match = charset.match(/^utf[-_]?(\\d+)$/i)) {\n    return 'UTF-' + match[1];\n  }\n\n  if (match = charset.match(/^win[-_]?(\\d+)$/i)) {\n    return 'WINDOWS-' + match[1];\n  }\n\n  if (match = charset.match(/^latin[-_]?(\\d+)$/i)) {\n    return 'ISO-8859-' + match[1];\n  }\n\n  return charset;\n}","map":null,"metadata":{},"sourceType":"script"}